@page "/"
<div id="container">
@for(byte row=0; row<game.board.GetLength(0); row++)
{
    <div class="row">
    @for(byte col=0; col<game.board.GetLength(1); col++)
    {
        <div class="grid @determineClass(row, col)"></div>
    }
    </div>
}
</div>
<input id="control-capture" type="text" tabindex="0" @ref="controlRef" @onkeydown="evt => HandleKeyPress(evt)" 
value="you shouldn't see me" style="opacity: 0;">
<style>
    .grid {
        width: 1vh;
        height: 1vw;
        min-width: 50px;
        min-height: 50px;
        border-width: 2px;
        border: 1px solid grey;
    }
    .grid-empty {
        background-color: black;
    }
    .grid-shape {
        background-color: yellow;
    }
</style>

@inject IJSRuntime JSRuntime
@implements IObserver<int[,]>
@code
{
    ElementReference? controlRef;
    TetrisGame game = new TetrisGame();

    async Task HandleKeyPress(KeyboardEventArgs args) 
    {
        await JSRuntime.InvokeVoidAsync("BlazorExtensions.PreventDefault", args);
        Console.WriteLine($"key: {args.Key}");
        if(args.Key == "s")
        {
            game.HandleControl(KeyCommand.Down);
        }
    }
    private async Task FocusContainer()
    {
        Console.WriteLine($"FocusContainer");
        await JSRuntime.InvokeVoidAsync("BlazorExtensions.FocusElement", controlRef);
    }
    string determineClass(int row, int col)
    {
        if (game.board[row, col] == 0) return "grid-empty";
        return "grid-shape";
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) await FocusContainer();
    }
    protected override void OnInitialized()
    {
        ResetGame();
    }
    void ResetGame()
    {
        game.Subscribe(this);
        _ = game.Start();
    }
    public void OnNext(int[,] board) 
    {
        StateHasChanged();
    }
    public void OnCompleted() 
    {
        game.Unsubcribe(this);
        game.Dispose();
        _ = JSRuntime.InvokeVoidAsync("alert", "Game Over");
    }
    public void OnError(Exception e) { Console.WriteLine(e); }
}